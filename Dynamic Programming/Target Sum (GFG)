//{ Driver Code Starts
//Initial Template for C++

#include <bits/stdc++.h>
using namespace std;


// } Driver Code Ends
//Back-end complete function Template for C++

class Solution {
  public:
  
    int f(int index, int target, vector<int> &arr, vector<vector<int>> &dp)
    {
        if(index == 0)
        {
            if(target == 0 && arr[0] == 0)
            {
                return 2;
            }
            if(target == 0 || target == arr[0])
            {
                return 1;
            }
            return 0;
        }
        
        if(dp[index][target] != -1)
        {
            return dp[index][target];
        }
        
        int nottake = f(index-1, target, arr, dp);
        int take = 0;
        if(arr[index] <= target)
        {
            take = f(index-1, target - arr[index], arr, dp);
        }
        
        return dp[index][target] = (nottake + take);
    }
    
    int findTargetSumWays(vector<int>&A ,int target) {
        
        int totsum = 0;
        for(int i=0; i<A.size(); i++)
        {
            totsum += A[i];
        }
        
        int tar = totsum - target;
        
        if(tar < 0 || tar % 2 == 1)
        {
            return 0;
        }
        tar = tar/2;
        vector<vector<int>> dp(A.size(), vector<int>(tar+1, -1));
        return f(A.size()-1, tar, A, dp);
        
    
    }
};

//{ Driver Code Starts.

int main() {
    int t;
    cin >> t;
    while (t--) {
        int N;
        
        cin>>N;
        vector<int>arr(N);
        
        for(int i=0 ; i<N ; i++){
            cin>>arr[i];
        }
        int target;
        cin >> target;

        Solution ob;
        cout<<ob.findTargetSumWays(arr,target);
        cout<<"\n";
    }
    return 0;
}
// } Driver Code Ends
