//{ Driver Code Starts
// Initial Template for C++

#include <bits/stdc++.h>
using namespace std;


// } Driver Code Ends
// User function Template for C++

class Solution{
  public:
  
    int f(int index, int W, int price[], vector<int> wt, vector<vector<int>> &dp)
    {
        if(index == 0)
        {
            return ((int)W/wt[index])*price[index]; 
        }
        if(dp[index][W] != -1)
        {
            return dp[index][W];
        }
        
        int nottake = f(index-1, W, price, wt, dp);
        int take = INT_MIN;
        if(wt[index] <= W)
            take = price[index] + f(index, W - wt[index], price, wt, dp);
        
        return dp[index][W] = max(take, nottake);
    }
  
    int cutRod(int price[], int n) {
        vector<int> wt(n,0);
        for(int i = 0; i<n; i++)
        {
            wt[i] = i+1;
        }
        
        vector<vector<int>> dp(n, vector<int>(n+1, 0));
        // return f(n-1, n, price, wt, dp);
        
        for(int N = 0; N <= n; N++)
        {
            dp[0][N] = N*price[0];
        }
        
        for(int ind = 1; ind < n; ind++)
        {
            for(int N = 0; N <= n; N++)
            {
                int nottake = dp[ind-1][N];
                int take = INT_MIN;
                int rodlen = ind+1;
                if(rodlen <= N)
                    take = price[ind] + dp[ind][N - rodlen];
                
                dp[ind][N] = max(take, nottake);
            }
        }
        
        return dp[n-1][n];
    }
};

//{ Driver Code Starts.

int main() {
    int t;
    cin >> t;
    while (t--) {
        int n;
        cin >> n;
        int a[n];
        for (int i = 0; i < n; i++) 
            cin >> a[i];
            
        Solution ob;

        cout << ob.cutRod(a, n) << endl;
    }
    return 0;
}
// } Driver Code Ends
