//{ Driver Code Starts
#include <bits/stdc++.h>
using namespace std;


// } Driver Code Ends
class Solution {
  public:
    vector<int> longestIncreasingSubsequence(int n, vector<int>& a) {
        vector<int> dp(n, 1);
        vector<int> hash(n);
        for(int i=0; i<n; i++)hash[i] = i;
        
        int maxi = 1;
        int last_index=0;
        for(int i=0; i<n; i++)
        {
            for(int j=0; j<i; j++)
            {
                if(a[j] < a[i] && dp[i] < 1+ dp[j])
                {
                    dp[i] = 1+dp[j];
                    hash[i] = j;
                }
            }
            
            if(maxi < dp[i])
            {
                maxi = dp[i];
                last_index = i;
            }
        }
        
        vector<int> temp;
        temp.push_back(a[last_index]);
        
        while(hash[last_index] != last_index)
        {
            last_index = hash[last_index];
            temp.push_back(a[last_index]);
        }
        
        reverse(temp.begin(), temp.end());
        return temp;
    }
};

//{ Driver Code Starts.

int main() {
    int t;
    cin >> t;
    while (t--) {
        int N;
        cin >> N;
        vector<int> arr(N);
        for (int i = 0; i < N; i++) {
            cin >> arr[i];
        }
        Solution obj;
        vector<int> res = obj.longestIncreasingSubsequence(N, arr);
        for (auto x : res) cout << x << " ";
        cout << "\n";
    }
    return 0;
}
// } Driver Code Ends
