//{ Driver Code Starts
#include<bits/stdc++.h>
using namespace std;


// } Driver Code Ends
class Solution
{
    public:
    //Function to return max value that can be put in knapsack of capacity W.
    
    int f(int index, int W, int wt[], int val[], vector<vector<int>> &dp)
    {
        if(index == 0)
        {
            if(wt[0] <= W)
            {
                return val[0];
            }
            else
            {
                return 0;
            }
        }
        
        if(dp[index][W] != -1)
        {
            return dp[index][W];
        }
        
        int pick = INT_MIN;
        if(wt[index] <= W)
        {
            pick = val[index] + f(index -1, W - wt[index], wt, val, dp);
        }
        int notpick = f(index-1, W, wt, val, dp);
        return dp[index][W] = max(pick, notpick);
    }
    
    int knapSack(int W, int wt[], int val[], int n) 
    {
        vector<vector<int>> dp(n, vector<int>(W+1, 0));
        // return f(n-1, W, wt, val, dp);
        
        for(int i = wt[0]; i <= W; i++)
        {
            dp[0][i] = val[0]; 
        }
        
        for(int index = 1; index < n; index ++)
        {
            for(int w = 0; w <= W; w++)
            {
                int nottake = 0 + dp[index-1][w];
                int take = INT_MIN;
                
                if(wt[index] <= w)
                {
                    take = val[index] + dp[index-1][w - wt[index]];
                }
                dp[index][w] = max(take, nottake);
            }
        }
        return dp[n-1][W]; 
    }
};

//{ Driver Code Starts.

int main()
 {
    //taking total testcases
    int t;
    cin>>t;
    while(t--)
    {
        //reading number of elements and weight
        int n, w;
        cin>>n>>w;
        
        int val[n];
        int wt[n];
        
        //inserting the values
        for(int i=0;i<n;i++)
            cin>>val[i];
        
        //inserting the weights
        for(int i=0;i<n;i++)
            cin>>wt[i];
        Solution ob;
        //calling method knapSack()
        cout<<ob.knapSack(w, wt, val, n)<<endl;
        
    }
	return 0;
}
// } Driver Code Ends
