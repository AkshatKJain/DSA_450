//{ Driver Code Starts
#include <bits/stdc++.h>
using namespace std;

// } Driver Code Ends
class Solution {
  public:
  
    int f(int index, int target, vector<vector<int>> &dp, vector<int> arr, int modulo)
    {
        if(index == 0)
        {
            if(target == 0 && arr[index] == 0)
            {
                return 2;
            }
            if(target == 0 || target == arr[0])
            {
                return 1;
            }
            return 0;
        }
        
        if(dp[index][target] != -1)
        {
            return dp[index][target];
        }
        
        int nottake = f(index -1, target, dp, arr, modulo);
        int take = 0;
        if(arr[index] <= target)
        {
            take = f(index-1, target - arr[index], dp, arr, modulo);
        }
        
        return dp[index][target] = (take + nottake) % modulo;
    }
    
    int countPartitions(int n, int d, vector<int>& arr) {
        
        int totsum = 0;
        for(int i=0; i<n; i++)
        {
            totsum += arr[i];
        }
        
        int target = totsum -d;
        
        if(target < 0) return 0;
        if(target % 2 == 1) return 0;
        
        target = target/2;
        
        vector<vector<int>> dp(n, vector<int>(target+1, 0));
        
        int modulo = 1e9 + 7;
        
        // return f(n-1, target, dp, arr, modulo);
        
        if(arr[0] == 0)
        {
            dp[0][0] = 2;
        }
        else
        {
            dp[0][0] = 1;
        }
        if(arr[0]!=0 && arr[0]<=target) dp[0][arr[0]] = 1; 
        
        for(int index = 1; index < n; index++)
        {
            for(int tar = 0; tar <= target; tar++ )
            {
                int nottaken = dp[index-1][tar];
                int taken = 0; 
                if(arr[index] <= tar)
                {
                    taken = dp[index-1][tar - arr[index]];
                }
                
                dp[index][tar] = (taken + nottaken) % modulo;
            }
        }
        
        return dp[n-1][target];
    }
    
};

//{ Driver Code Starts.
int main() {
    int t;
    cin >> t;
    while (t--) {
        int n, d;
        cin >> n >> d;
        vector<int> arr;

        for (int i = 0; i < n; ++i) {
            int x;
            cin >> x;
            arr.push_back(x);
        }

        Solution obj;
        cout << obj.countPartitions(n, d, arr) << "\n";
    }
    return 0;
}
// } Driver Code Ends
