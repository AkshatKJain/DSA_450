class Solution {
  public:
  
  int f(int i, int j, vector<vector<int>> &dp, vector<vector<int>> &grid)
  {
      if(i == 0 && j == 0)
      {
          return 1;
      }
      if(i < 0 || j < 0)
      {
          return 0;
      }
      if(grid[i][j] == 0)
      {
          return dp[i][j] = 0;
      }
      if(dp[i][j] != -1)
      {
          return dp[i][j];
      }
      int left = f(i, j-1, dp, grid);
      int up = f(i-1, j, dp, grid);
      return dp[i][j] = (left + up)%1000000007;
  }
  
    int uniquePaths(int n, int m, vector<vector<int>> &grid) {
        vector<vector<int>> dp(n+1, vector<int>(m,-1));
        if(grid[0][0] == 0 || grid[n-1][m-1] == 0)
        {
            return 0;
        }
        return f(n-1, m-1, dp, grid);
    }
};
