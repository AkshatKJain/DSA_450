class Solution 
{
    public:
    //Function to find distance of nearest 1 in the grid for each cell.
	vector<vector<int>>nearest(vector<vector<int>>grid)
	{
	    int m = grid.size();
	    int n = grid[0].size();
	    vector<vector<int>> dis(m, vector<int>(n,0));
	    vector<vector<int>> visited(m, vector<int>(n,0));
	    queue<pair<pair<int,int>, int>> q;
	    
	    for(int i=0; i<m; i++)
	    {
	        for(int j=0; j<n; j++)
	        {
	            if(grid[i][j] == 1)
	            {
	                q.push({{i,j}, 0});
	                visited[i][j] = 1;
	            }
	        }
	    }
	    vector<pair<int,int>> temp;
	    temp.push_back({1,0});
	    temp.push_back({-1,0});
	    temp.push_back({0,1});
	    temp.push_back({0,-1});
	    
	    while(!q.empty())
	    {
            int i = q.front().first.first;
            int j = q.front().first.second;
            int step = q.front().second;
            dis[i][j] = step;
            q.pop();
            
            for(auto it : temp)
            {
                int newi = i + it.first;
                int newj = j + it.second;
                
                if(newi >= 0 && newi < m && newj >= 0 && newj < n)
                {
                    if(!visited[newi][newj])
                    {
                        visited[newi][newj] = 1;
                        q.push({{newi,newj}, step + 1});
                    }
                }
            }
	    }
	    
	    return dis;
	}
};
