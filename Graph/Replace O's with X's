class Solution{
public:
    void dfs(int i, int j, vector<vector<int>> &visited,vector<vector<char>> mat)
    {
        int n = mat.size();
        int m = mat[0].size();
        
        vector<pair<int,int>> temp;
        temp.push_back({0,1});
        temp.push_back({0,-1});
        temp.push_back({1,0});
        temp.push_back({-1,0});
        
        visited[i][j] = 1;
        
        for(auto it: temp)
        {
            int newr = it.first + i;
            int newc = it.second + j;
            
            if(newr >= 0 && newr < n && newc >= 0 && newc < m)
            {
                if(!visited[newr][newc] && mat[newr][newc] == 'O')
                {
                    dfs(newr, newc, visited, mat);
                }
            }
        }
    }

    vector<vector<char>> fill(int n, int m, vector<vector<char>> mat)
    {
        vector<vector<int>> visited(n, vector<int>(m, 0));
        
        for(int i = 0; i<n; i++)
        {
            if(!visited[i][0] && mat[i][0] == 'O')
            {
                dfs(i, 0, visited, mat);
            }
            if(!visited[i][m-1] && mat[i][m-1] == 'O')
            {
                dfs(i, m-1, visited, mat);
            }
        }
        
        for(int j = 0; j < m; j++)
        {
            if(!visited[0][j] && mat[0][j] == 'O')
            {
                dfs(0, j, visited, mat);
            }
            if(!visited[n-1][j] && mat[n-1][j] == 'O')
            {
                dfs(n-1, j, visited, mat);
            }
        }
        
        for(int i=0; i<n; i++)
        {
            for(int j =0; j<m; j++)
            {
                if(!visited[i][j] && mat[i][j] == 'O')
                {
                    mat[i][j] = 'X';
                }
            }
        }
        return mat;
    }
};
