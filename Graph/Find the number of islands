class Solution {
  public:
    // Function to find the number of islands.
    
    void fn(int i, int j, vector<vector<int>> &visited, vector<vector<char>> &grid, int n, int m)
    {
        visited[i][j] = 1;
        queue<pair<int,int>> q;
        q.push(make_pair(i,j));
        
        vector<pair<int,int>> temp;
        temp.push_back(make_pair(1,0));
        temp.push_back(make_pair(-1,0));
        temp.push_back(make_pair(0,1));
        temp.push_back(make_pair(0,-1));
        temp.push_back(make_pair(1,1));
        temp.push_back(make_pair(-1,-1));
        temp.push_back(make_pair(1,-1));
        temp.push_back(make_pair(-1,1));
        
        
        while(!q.empty())
        {
            int i = q.front().first;
            int j = q.front().second;
            q.pop();
            
            for(auto it: temp)
            {
                if((it.first + i) < n && (it.first + i) >= 0 && (it.second + j) < m && (it.second + j) >= 0)
                {
                    if(grid[it.first + i][it.second + j] == '1' && visited[it.first + i][it.second + j] == 0)
                    {
                        q.push(make_pair(it.first + i,it.second + j));
                        visited[it.first + i][it.second + j] = 1;
                    }
                }
                
            }
            
        }
        
    }
    
    int numIslands(vector<vector<char>>& grid) {
        int n = grid.size();
        int m = grid[0].size();
        vector<vector<int>> visited(n, vector<int>(m,0));
        int counter = 0;
        
        for(int i=0; i<n; i++)
        {
            for(int j=0; j<m; j++)
            {
                if(grid[i][j] == '1' && visited[i][j] == 0)
                {
                    counter++;
                    fn(i,j,visited,grid, n, m);
                }
            }
        }
        return counter;
    }
};
