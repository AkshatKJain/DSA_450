class Solution {
  public:
    
    bool dfs(int node, vector<int> &visited, vector<int> &path, vector<int> &check, vector<int> adj[])
    {
        visited[node] = 1;
        path[node] = 1;
        check[node] = 0;
        
        for(auto it: adj[node])
        {
            if(!visited[it])
            {
                if(dfs(it, visited, path, check, adj) == true)
                {
                    check[node] = 0;
                    return true;
                }
            }
            else if(path[it])
            {
                check[node] = 0;
                return true;
            }
        }
        
        path[node] = 0;
        check[node] = 1;
        return false;
    }
  
  
    vector<int> eventualSafeNodes(int V, vector<int> adj[]) {
        
        vector<int> visited(V, 0);
        vector<int> path(V, 0);
        vector<int> check(V, 0);
        vector<int> ans;
        for(int i=0; i<V; i++)
        {
            if(!visited[i])
            {
                dfs(i, visited, path, check, adj);
            }
        }
        
        for(int i=0; i<V; i++)
        {
            if(check[i] == 1)
            {
                ans.push_back(i);
            }
        }
        
        return ans;
    }
};
