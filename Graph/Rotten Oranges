class Solution 
{
    public:
    //Function to find minimum time required to rot all oranges. 
    int orangesRotting(vector<vector<int>>& grid) {
        int n = grid.size();
        int m = grid[0].size();
        vector<vector<int>> visited(n, vector<int>(m,0));
        queue<pair<pair<int,int>, int>> q;
        
        int cntf = 0;
        
        
        for(int i=0; i<n; i++)
        {
            for(int j=0; j<m; j++)
            {
                if(grid[i][j] == 2)
                {
                    q.push({{i,j},0});
                    visited[i][j] = 2;
                }
                if(grid[i][j] == 1)
                {
                    cntf++;
                }
            }
        }
        
        int tm = 0;
        vector<pair<int,int>> temp;
        temp.push_back({1,0});
        temp.push_back({-1,0});
        temp.push_back({0,1});
        temp.push_back({0,-1});
        
        int cnt = 0;
        while(!q.empty())
        {
            int i = q.front().first.first;
            int j = q.front().first.second;
            int t = q.front().second;
            tm = max(tm, t);
            q.pop();
            
            for(auto it:temp)
            {
                int newr = i + it.first;
                int newc = j + it.second;
                
                if(newr < n && newr >=0 && newc < m && newc >= 0)
                {
                    if(grid[newr][newc] == 1 && visited[newr][newc] == 0)
                    {
                        q.push({{newr,newc}, t+1});
                        visited[newr][newc] = 2;
                        cnt++;
                    }
                }
            }
        }
        
       if(cnt != cntf)
        return -1;
        
        return tm;
        
        
    }
};
